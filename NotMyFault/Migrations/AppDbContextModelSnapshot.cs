// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using NotMyFault.Models.DataAccessLayer;
using System;

namespace NotMyFault.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NotMyFault.Models.DataAccessLayer.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.CryptcurValue", b =>
                {
                    b.Property<int>("CryptcurValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BitcoinValue");

                    b.Property<double>("EthereumValue");

                    b.Property<double>("LitecoinValue");

                    b.Property<int>("ProjectForeignKey");

                    b.HasKey("CryptcurValueId");

                    b.HasIndex("ProjectForeignKey")
                        .IsUnique();

                    b.ToTable("CryptcurValues");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Distribution", b =>
                {
                    b.Property<int>("DistributionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Divisor");

                    b.Property<int>("ProjectForeignKey");

                    b.HasKey("DistributionId");

                    b.HasIndex("ProjectForeignKey")
                        .IsUnique();

                    b.ToTable("Distributions");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.InterConverEntry", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("ByDevId");

                    b.Property<string>("DevNickName");

                    b.Property<int>("ProjectForeignKey");

                    b.Property<string>("Text");

                    b.HasKey("Timestamp");

                    b.HasIndex("ProjectForeignKey");

                    b.ToTable("InterConverEntries");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Interview", b =>
                {
                    b.Property<DateTime>("Time");

                    b.Property<int>("DevIntwveeForeignKey");

                    b.Property<int>("DevIntwverForeignKey");

                    b.Property<int>("RecruitmentForeignKey");

                    b.HasKey("Time");

                    b.HasIndex("DevIntwveeForeignKey")
                        .IsUnique();

                    b.HasIndex("DevIntwverForeignKey")
                        .IsUnique();

                    b.HasIndex("RecruitmentForeignKey");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Like", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<bool>("IsVisitor");

                    b.Property<int>("ProjectForeignKey");

                    b.Property<int>("UserForeignKey");

                    b.HasKey("Timestamp");

                    b.HasIndex("ProjectForeignKey");

                    b.HasIndex("UserForeignKey");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.NegoEntry", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("NegoForeignKey");

                    b.Property<string>("Text");

                    b.Property<int>("UserId");

                    b.Property<string>("UserNickName");

                    b.HasKey("Timestamp");

                    b.HasIndex("NegoForeignKey");

                    b.ToTable("NegoEntries");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Negotiation", b =>
                {
                    b.Property<int>("NegotiationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BuyerId");

                    b.Property<int>("ProjectForeignKey");

                    b.HasKey("NegotiationId");

                    b.HasIndex("ProjectForeignKey");

                    b.ToTable("Negotiations");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BriefDescript");

                    b.Property<int>("DeveloperForeignKey");

                    b.Property<string>("FullDescript");

                    b.Property<int>("InitiatorIdForeignKey");

                    b.Property<int>("LeaderIdForeignKey");

                    b.Property<byte>("MyGallery");

                    b.Property<DateTime>("NextMeetingDate");

                    b.Property<int>("Progress");

                    b.Property<string>("ProjName");

                    b.Property<DateTime>("ProtdCompDate");

                    b.Property<string>("RepoLink");

                    b.Property<DateTime>("StartingDate");

                    b.Property<int>("Status");

                    b.Property<byte>("Thumbnail");

                    b.Property<int>("Visibility");

                    b.HasKey("ProjectId");

                    b.HasIndex("InitiatorIdForeignKey");

                    b.HasIndex("LeaderIdForeignKey");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.PublicOpinion", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("MyVisitorNickName");

                    b.Property<int>("ProjectForeignKey");

                    b.Property<string>("Text");

                    b.HasKey("Timestamp");

                    b.HasIndex("MyVisitorNickName");

                    b.HasIndex("ProjectForeignKey");

                    b.ToTable("PublicOpinions");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Recruitment", b =>
                {
                    b.Property<int>("RecruitmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsOpen");

                    b.Property<int>("MaxNumPrjWkOn");

                    b.Property<int>("MinCredit");

                    b.Property<string>("NameOfTheRole");

                    b.Property<int?>("ProjectForeignKey");

                    b.Property<string>("RequirDescript");

                    b.Property<string>("RoleDescription");

                    b.HasKey("RecruitmentId");

                    b.HasIndex("ProjectForeignKey");

                    b.ToTable("Recruitments");
                });

            modelBuilder.Entity("NotMyFault.Models.TransRelated.TradeBox", b =>
                {
                    b.Property<int>("TradeBoxId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("GdInPlcTs");

                    b.Property<DateTime>("GdVerifiedTs");

                    b.Property<byte>("Goods");

                    b.Property<bool>("IsEmpty");

                    b.Property<bool>("IsGdInPlc");

                    b.Property<bool>("IsGdVerified");

                    b.Property<bool>("IsMoneyInPlc");

                    b.Property<bool>("IsMoneyVerified");

                    b.Property<bool>("IsReadyForEx");

                    b.Property<DateTime>("MoneyInPlcTs");

                    b.Property<DateTime>("MoneyVerifiedTs");

                    b.Property<int>("TransactionForeignKey");

                    b.HasKey("TradeBoxId");

                    b.ToTable("TradeBoxes");
                });

            modelBuilder.Entity("NotMyFault.Models.TransRelated.Transaction", b =>
                {
                    b.Property<int>("TranId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BuyerForeignKey");

                    b.Property<DateTime>("DateAborted");

                    b.Property<DateTime>("DateCompleted");

                    b.Property<bool>("IsAborted");

                    b.Property<bool>("IsCompleted");

                    b.Property<int>("ProjectForeignKey");

                    b.Property<decimal>("TranAmount");

                    b.Property<int?>("TransactionForeignKey");

                    b.HasKey("TranId");

                    b.HasIndex("BuyerForeignKey");

                    b.HasIndex("ProjectForeignKey")
                        .IsUnique();

                    b.HasIndex("TransactionForeignKey")
                        .IsUnique()
                        .HasFilter("[TransactionForeignKey] IS NOT NULL");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("NickName");

                    b.Property<byte>("Thumbnail");

                    b.HasKey("AdministratorId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.BuyerProject", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("BuyerProjs");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.CryptcurAddr", b =>
                {
                    b.Property<int>("CryptcurAddrId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BitcoinAddr");

                    b.Property<string>("EthereumAddr");

                    b.Property<string>("LitecoinAddr");

                    b.Property<int>("UserForeignKey");

                    b.HasKey("CryptcurAddrId");

                    b.HasIndex("UserForeignKey")
                        .IsUnique();

                    b.ToTable("CryptcurAddrs");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperProject", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DevProjs");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperRecruitment", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("RecruitmentId");

                    b.HasKey("Id", "RecruitmentId");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("DevRecruits");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Endorsment", b =>
                {
                    b.Property<int>("EndorsmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EndorsGivenForeignKey");

                    b.Property<int>("EndorsGiverForeignKey");

                    b.Property<string>("Subject");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("EndorsmentId");

                    b.HasIndex("EndorsGivenForeignKey");

                    b.HasIndex("EndorsGiverForeignKey");

                    b.ToTable("Endorsments");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Review", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("Comments");

                    b.Property<int>("ProjId");

                    b.Property<int>("RevieweeIdForeignKey");

                    b.Property<int>("ReviewerId");

                    b.Property<int>("Score");

                    b.HasKey("Timestamp");

                    b.HasIndex("RevieweeIdForeignKey");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.SNAEntry", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int?>("MyAdminAdministratorId");

                    b.Property<int?>("MySNASupptNAllegId");

                    b.Property<string>("Text");

                    b.HasKey("Timestamp");

                    b.HasIndex("MyAdminAdministratorId");

                    b.HasIndex("MySNASupptNAllegId");

                    b.ToTable("SNAEntries");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.SupptNAlleg", b =>
                {
                    b.Property<int>("SupptNAllegId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MyUserId");

                    b.HasKey("SupptNAllegId");

                    b.HasIndex("MyUserId");

                    b.ToTable("SupptNAllegs");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NickName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Region");

                    b.Property<int>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<byte>("Thumbnail");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.UserProject", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjs");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Visitor", b =>
                {
                    b.Property<string>("NickName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<bool>("IsAnonumous");

                    b.Property<string>("Region");

                    b.HasKey("NickName");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Buyer", b =>
                {
                    b.HasBaseType("NotMyFault.Models.UserRelated.User");

                    b.Property<string>("CompanyAddr");

                    b.Property<string>("CompanyName");

                    b.Property<int>("Earnest");

                    b.ToTable("Buyer");

                    b.HasDiscriminator().HasValue("Buyer");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Developer", b =>
                {
                    b.HasBaseType("NotMyFault.Models.UserRelated.User");

                    b.Property<string>("LinkedinUrl");

                    b.Property<string>("SelfIntro");

                    b.ToTable("Developer");

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("NotMyFault.Models.DataAccessLayer.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("NotMyFault.Models.DataAccessLayer.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.UserRelated.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.CryptcurValue", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithOne("Valuation")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.CryptcurValue", "ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Distribution", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithOne("MyDistribut")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.Distribution", "ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.InterConverEntry", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyConver")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Interview", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Interviewee")
                        .WithOne("MyIntwAsViewee")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.Interview", "DevIntwveeForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Interviewer")
                        .WithOne("MyIntwAsViewer")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.Interview", "DevIntwverForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.ProjRelated.Recruitment", "MyRecruit")
                        .WithMany("MyInterviews")
                        .HasForeignKey("RecruitmentForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Like", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyLikes")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.UserRelated.User", "Liker")
                        .WithMany("ProjILiked")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.NegoEntry", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Negotiation", "MyNego")
                        .WithMany("MyEntries")
                        .HasForeignKey("NegoForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Negotiation", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyNegos")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Project", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Initiator")
                        .WithMany("MyInitiatedProjs")
                        .HasForeignKey("InitiatorIdForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "ProjLeader")
                        .WithMany("MyLeadingProjs")
                        .HasForeignKey("LeaderIdForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.PublicOpinion", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Visitor", "MyVisitor")
                        .WithMany()
                        .HasForeignKey("MyVisitorNickName");

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyPubOpin")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Recruitment", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyRecruits")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.TransRelated.Transaction", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Buyer", "MyBuyer")
                        .WithMany("AssociateTrans")
                        .HasForeignKey("BuyerForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithOne("MyTran")
                        .HasForeignKey("NotMyFault.Models.TransRelated.Transaction", "ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.TransRelated.TradeBox", "MyTradeBox")
                        .WithOne("Mytran")
                        .HasForeignKey("NotMyFault.Models.TransRelated.Transaction", "TransactionForeignKey");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.BuyerProject", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Buyer", "Buyer")
                        .WithMany("MyWatchingProj")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "Proj")
                        .WithMany("MyWatchers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.CryptcurAddr", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User", "MyUser")
                        .WithOne("MyCryptcurAddr")
                        .HasForeignKey("NotMyFault.Models.UserRelated.CryptcurAddr", "UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperProject", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Dev")
                        .WithMany("MyProjs")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "Proj")
                        .WithMany("MyDevs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperRecruitment", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Dev")
                        .WithMany("MyAppliedRoles")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.ProjRelated.Recruitment", "Recruit")
                        .WithMany("MyCandis")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Endorsment", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "MyDev")
                        .WithMany("MyEndors")
                        .HasForeignKey("EndorsGivenForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "FromDev")
                        .WithMany("EndorsIGive")
                        .HasForeignKey("EndorsGiverForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Review", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Reviewee")
                        .WithMany("MyReviews")
                        .HasForeignKey("RevieweeIdForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.SNAEntry", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Administrator", "MyAdmin")
                        .WithMany()
                        .HasForeignKey("MyAdminAdministratorId");

                    b.HasOne("NotMyFault.Models.UserRelated.SupptNAlleg", "MySNA")
                        .WithMany("MyEntries")
                        .HasForeignKey("MySNASupptNAllegId");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.SupptNAlleg", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User", "MyUser")
                        .WithMany("MySupNAlleg")
                        .HasForeignKey("MyUserId");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.UserProject", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User", "User")
                        .WithMany("MyFollowings")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "Proj")
                        .WithMany("MyFollowers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
