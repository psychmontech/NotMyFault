// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using NotMyFault.Models.Misce;
using System;

namespace NotMyFault.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NotMyFault.Models.Misce.SNAEntry", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int?>("MyAdminAdministratorId");

                    b.Property<int?>("MySNASupptNAllegId");

                    b.Property<string>("Text");

                    b.HasKey("Timestamp");

                    b.HasIndex("MyAdminAdministratorId");

                    b.HasIndex("MySNASupptNAllegId");

                    b.ToTable("SNAEntry");
                });

            modelBuilder.Entity("NotMyFault.Models.Misce.SupptNAlleg", b =>
                {
                    b.Property<int>("SupptNAllegId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MyUserUserId");

                    b.HasKey("SupptNAllegId");

                    b.HasIndex("MyUserUserId");

                    b.ToTable("SupptNAllegs");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.CandiRqrmt", b =>
                {
                    b.Property<int>("CandiRqrmtId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Availability");

                    b.Property<string>("Expertise");

                    b.Property<int>("MinCredit");

                    b.Property<int>("RecruitmentForeignKey");

                    b.HasKey("CandiRqrmtId");

                    b.ToTable("CandiRqrmts");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Distribution", b =>
                {
                    b.Property<int>("DistributionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectForeignKey");

                    b.Property<string>("divisor");

                    b.HasKey("DistributionId");

                    b.HasIndex("ProjectForeignKey")
                        .IsUnique();

                    b.ToTable("Distributions");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.InternalConver", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int?>("ByDevUserId");

                    b.Property<int>("ProjectForeignKey");

                    b.Property<string>("Text");

                    b.HasKey("Timestamp");

                    b.HasIndex("ByDevUserId");

                    b.HasIndex("ProjectForeignKey")
                        .IsUnique();

                    b.ToTable("InternalConver");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Interview", b =>
                {
                    b.Property<DateTime>("Time");

                    b.Property<int?>("IntervieweeUserId");

                    b.Property<int?>("InterviewerUserId");

                    b.Property<int>("RecruitmentForeignKey");

                    b.HasKey("Time");

                    b.HasIndex("IntervieweeUserId");

                    b.HasIndex("InterviewerUserId");

                    b.HasIndex("RecruitmentForeignKey")
                        .IsUnique();

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Like", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<bool>("IsVisitor");

                    b.Property<int?>("LikerUserId");

                    b.Property<int>("ProjectForeignKey");

                    b.HasKey("Timestamp");

                    b.HasIndex("LikerUserId");

                    b.HasIndex("ProjectForeignKey");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.NegoEntry", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int?>("BuyerUserId");

                    b.Property<int?>("DeveloperUserId");

                    b.Property<DateTime>("NegoForeignKey");

                    b.Property<string>("Text");

                    b.HasKey("Timestamp");

                    b.HasIndex("BuyerUserId");

                    b.HasIndex("DeveloperUserId");

                    b.HasIndex("NegoForeignKey");

                    b.ToTable("NegoEntries");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Negotiation", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int?>("MyBuyerUserId");

                    b.Property<int>("ProjectForeignKey");

                    b.HasKey("Timestamp");

                    b.HasIndex("MyBuyerUserId");

                    b.HasIndex("ProjectForeignKey");

                    b.ToTable("Negotiations");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BriefDescript");

                    b.Property<int>("Capacity");

                    b.Property<int>("DeveloperForeignKey");

                    b.Property<string>("FullDescript");

                    b.Property<int>("InitiatorIdForeignKey");

                    b.Property<int>("LeaderIdForeignKey");

                    b.Property<byte>("MyGallery");

                    b.Property<DateTime>("NextMeetingDate");

                    b.Property<decimal>("Progress");

                    b.Property<string>("ProjName");

                    b.Property<DateTime>("ProtdCompDate");

                    b.Property<string>("RepoLink");

                    b.Property<DateTime>("StartingDate");

                    b.Property<int>("Status");

                    b.Property<byte>("Thumbnail");

                    b.Property<long>("Valuation");

                    b.Property<int>("Visibility");

                    b.HasKey("ProjectId");

                    b.HasIndex("InitiatorIdForeignKey");

                    b.HasIndex("LeaderIdForeignKey");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.PublicOpinion", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("MyVisitorNickName");

                    b.Property<int>("ProjectForeignKey");

                    b.Property<string>("Text");

                    b.HasKey("Timestamp");

                    b.HasIndex("MyVisitorNickName");

                    b.HasIndex("ProjectForeignKey");

                    b.ToTable("PublicOpinions");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Recruitment", b =>
                {
                    b.Property<int>("RecruitmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProjectForeignKey");

                    b.Property<int?>("RecruitmentForeignKey");

                    b.Property<string>("RoleDescription");

                    b.HasKey("RecruitmentId");

                    b.HasIndex("ProjectForeignKey")
                        .IsUnique()
                        .HasFilter("[ProjectForeignKey] IS NOT NULL");

                    b.HasIndex("RecruitmentForeignKey")
                        .IsUnique()
                        .HasFilter("[RecruitmentForeignKey] IS NOT NULL");

                    b.ToTable("Recruitments");
                });

            modelBuilder.Entity("NotMyFault.Models.TransRelated.TradeBox", b =>
                {
                    b.Property<int>("TradeBoxId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("GdInPlcTs");

                    b.Property<DateTime>("GdVerifiedTs");

                    b.Property<byte>("Goods");

                    b.Property<bool>("IsEmpty");

                    b.Property<bool>("IsGdInPlc");

                    b.Property<bool>("IsGdVerified");

                    b.Property<bool>("IsMoneyInPlc");

                    b.Property<bool>("IsMoneyVerified");

                    b.Property<bool>("IsReadyForEx");

                    b.Property<DateTime>("MoneyInPlcTs");

                    b.Property<DateTime>("MoneyVerifiedTs");

                    b.Property<int?>("MyProjProjectId");

                    b.Property<int>("TransactionForeignKey");

                    b.HasKey("TradeBoxId");

                    b.HasIndex("MyProjProjectId");

                    b.ToTable("TradeBoxes");
                });

            modelBuilder.Entity("NotMyFault.Models.TransRelated.Transaction", b =>
                {
                    b.Property<long>("TranId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAborted");

                    b.Property<DateTime>("DateCompleted");

                    b.Property<bool>("IsAborted");

                    b.Property<bool>("IsCompleted");

                    b.Property<int?>("MyBuyerUserId");

                    b.Property<int>("ProjectForeignKey");

                    b.Property<long>("TranAmount");

                    b.Property<int?>("TransactionForeignKey");

                    b.HasKey("TranId");

                    b.HasIndex("MyBuyerUserId");

                    b.HasIndex("ProjectForeignKey")
                        .IsUnique();

                    b.HasIndex("TransactionForeignKey")
                        .IsUnique()
                        .HasFilter("[TransactionForeignKey] IS NOT NULL");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("NickName");

                    b.Property<byte>("Thumbnail");

                    b.HasKey("AdministratorId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.BankDetails", b =>
                {
                    b.Property<int>("BankDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcctName");

                    b.Property<string>("AcctNo");

                    b.Property<string>("BankName");

                    b.Property<int>("DeveloperForeignKey");

                    b.Property<string>("SwiftCode");

                    b.HasKey("BankDetailsId");

                    b.HasIndex("DeveloperForeignKey")
                        .IsUnique();

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.BuyerProject", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ProjectId");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("BuyerProject");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperProject", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ProjectId");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DeveloperProject");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperRecruitment", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RecruitmentId");

                    b.HasKey("UserId", "RecruitmentId");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("DeveloperRecruitment");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Endorsment", b =>
                {
                    b.Property<int>("EndorsmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EndorsGivenForeignKey");

                    b.Property<int>("EndorsGiverForeignKey");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("subject");

                    b.HasKey("EndorsmentId");

                    b.HasIndex("EndorsGivenForeignKey");

                    b.HasIndex("EndorsGiverForeignKey");

                    b.ToTable("Endorsments");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Review", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("Comments");

                    b.Property<int>("RevieweeIdForeignKey");

                    b.Property<int>("ReviewerIdForeignKey");

                    b.Property<string>("Stars");

                    b.HasKey("Timestamp");

                    b.HasIndex("RevieweeIdForeignKey");

                    b.HasIndex("ReviewerIdForeignKey");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("NickName");

                    b.Property<string>("Region");

                    b.Property<byte>("Thumbnail");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.UserProject", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ProjectId");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProject");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Visitor", b =>
                {
                    b.Property<string>("NickName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<bool>("IsAnonumous");

                    b.Property<string>("Region");

                    b.HasKey("NickName");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Buyer", b =>
                {
                    b.HasBaseType("NotMyFault.Models.UserRelated.User");

                    b.Property<string>("CompanyAddr");

                    b.Property<string>("CompanyName");

                    b.Property<long>("Earnest");

                    b.ToTable("Buyer");

                    b.HasDiscriminator().HasValue("Buyer");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Developer", b =>
                {
                    b.HasBaseType("NotMyFault.Models.UserRelated.User");

                    b.Property<int>("Age");

                    b.Property<int>("Credit");

                    b.Property<int?>("DistributionId");

                    b.Property<string>("EmailAddr");

                    b.Property<string>("LinkedinUrl");

                    b.Property<string>("MySkills");

                    b.Property<long?>("TransactionTranId");

                    b.HasIndex("DistributionId");

                    b.HasIndex("TransactionTranId");

                    b.ToTable("Developer");

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("NotMyFault.Models.Misce.SNAEntry", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Administrator", "MyAdmin")
                        .WithMany()
                        .HasForeignKey("MyAdminAdministratorId");

                    b.HasOne("NotMyFault.Models.Misce.SupptNAlleg", "MySNA")
                        .WithMany("MyEntries")
                        .HasForeignKey("MySNASupptNAllegId");
                });

            modelBuilder.Entity("NotMyFault.Models.Misce.SupptNAlleg", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User", "MyUser")
                        .WithMany("MySupNAlleg")
                        .HasForeignKey("MyUserUserId");
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Distribution", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithOne("MyDistribut")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.Distribution", "ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.InternalConver", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "ByDev")
                        .WithMany()
                        .HasForeignKey("ByDevUserId");

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithOne("MyConver")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.InternalConver", "ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Interview", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Interviewee")
                        .WithMany()
                        .HasForeignKey("IntervieweeUserId");

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Interviewer")
                        .WithMany()
                        .HasForeignKey("InterviewerUserId");

                    b.HasOne("NotMyFault.Models.ProjRelated.Recruitment", "MyRecruit")
                        .WithOne("MyInterview")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.Interview", "RecruitmentForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Like", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.User", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerUserId");

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyLikes")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.NegoEntry", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerUserId");

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperUserId");

                    b.HasOne("NotMyFault.Models.ProjRelated.Negotiation", "MyNego")
                        .WithMany("MyEntries")
                        .HasForeignKey("NegoForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Negotiation", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Buyer", "MyBuyer")
                        .WithMany("MyNegos")
                        .HasForeignKey("MyBuyerUserId");

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyNegos")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Project", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Initiator")
                        .WithMany("MyInitiatedProjs")
                        .HasForeignKey("InitiatorIdForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "ProjLeader")
                        .WithMany("MyLeadingProjs")
                        .HasForeignKey("LeaderIdForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.PublicOpinion", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Visitor", "MyVisitor")
                        .WithMany()
                        .HasForeignKey("MyVisitorNickName");

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany("MyPubOpin")
                        .HasForeignKey("ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.ProjRelated.Recruitment", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithOne("MyRecruit")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.Recruitment", "ProjectForeignKey");

                    b.HasOne("NotMyFault.Models.ProjRelated.CandiRqrmt", "MyCandiRqrmts")
                        .WithOne("MyRecruit")
                        .HasForeignKey("NotMyFault.Models.ProjRelated.Recruitment", "RecruitmentForeignKey");
                });

            modelBuilder.Entity("NotMyFault.Models.TransRelated.TradeBox", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithMany()
                        .HasForeignKey("MyProjProjectId");
                });

            modelBuilder.Entity("NotMyFault.Models.TransRelated.Transaction", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Buyer", "MyBuyer")
                        .WithMany()
                        .HasForeignKey("MyBuyerUserId");

                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "MyProj")
                        .WithOne("MyTran")
                        .HasForeignKey("NotMyFault.Models.TransRelated.Transaction", "ProjectForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.TransRelated.TradeBox", "MyTradeBox")
                        .WithOne("Mytran")
                        .HasForeignKey("NotMyFault.Models.TransRelated.Transaction", "TransactionForeignKey");
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.BankDetails", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "MyDev")
                        .WithOne("MyBankDetails")
                        .HasForeignKey("NotMyFault.Models.UserRelated.BankDetails", "DeveloperForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.BuyerProject", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "Proj")
                        .WithMany("MyWatchers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.UserRelated.Buyer", "Buyer")
                        .WithMany("MyWatchingProj")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperProject", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "Proj")
                        .WithMany("MyDevs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Dev")
                        .WithMany("MyProjs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.DeveloperRecruitment", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "Dev")
                        .WithMany("MyAppliedRoles")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.ProjRelated.Recruitment", "Recruit")
                        .WithMany("MyCandis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Endorsment", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "MyDev")
                        .WithMany("MyEndors")
                        .HasForeignKey("EndorsGivenForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "FromDev")
                        .WithMany("EndorsIGive")
                        .HasForeignKey("EndorsGiverForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Review", b =>
                {
                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "MyReviewee")
                        .WithMany("MyReviews")
                        .HasForeignKey("RevieweeIdForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NotMyFault.Models.UserRelated.Developer", "MyReviewer")
                        .WithMany("MyReviewed")
                        .HasForeignKey("ReviewerIdForeignKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.UserProject", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Project", "Proj")
                        .WithMany("MyFollowers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NotMyFault.Models.UserRelated.User", "User")
                        .WithMany("MyFollowings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NotMyFault.Models.UserRelated.Developer", b =>
                {
                    b.HasOne("NotMyFault.Models.ProjRelated.Distribution")
                        .WithMany("Associates")
                        .HasForeignKey("DistributionId");

                    b.HasOne("NotMyFault.Models.TransRelated.Transaction")
                        .WithMany("MyDevs")
                        .HasForeignKey("TransactionTranId");
                });
#pragma warning restore 612, 618
        }
    }
}
